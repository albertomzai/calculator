{
  "api_contract": {
    "ruta": "/api/calculate",
    "metodo": "POST",
    "descripcion": "Endpoint que recibe una expresión matemática como string y devuelve su resultado numérico.",
    "parametros_entrada": {
      "expression": "string"
    },
    "respuesta_esperada": {
      "result": "number"
    }
  },
  "plan": [
    {
      "etapa": "backend",
      "tareas": [
        "Crear la carpeta 'backend' y el archivo '__init__.py' con una factory 'create_app'.",
        "Configurar en 'create_app' la ruta estática que apunte a '../frontend'.",
        "Definir un Blueprint llamado 'calc_bp' en 'routes.py' dentro de 'backend'.",
        "Implementar en 'routes.py' el endpoint POST '/api/calculate' que reciba JSON con clave 'expression', evalúe la expresión de forma segura y devuelva JSON con clave 'result'.",
        "Agregar manejo de errores para expresiones inválidas retornando un código 400 y mensaje claro.",
        "Crear 'app.py' en la raíz que importe y ejecute 'create_app()'.",
        "Escribir 'requirements.txt' con dependencias: Flask==2.3.*.",
        "Incluir 'pytest.ini' con configuración mínima para pruebas de integración.",
        "Agregar carpeta 'tests' con archivo 'test_backend.py' que utilice el test client de Flask para validar respuestas correctas e inválidas del endpoint."
      ]
    },
    {
      "etapa": "frontend",
      "tareas": [
        "Crear la carpeta 'frontend' y dentro un único archivo 'index.html'.",
        "Diseñar en 'index.html' una estructura básica con título, pantalla de entrada/resultado y botones numerados 0‑9, operadores + - * /, punto decimal, borrar (C) e igual (=).",
        "Aplicar estilos CSS inline o en un bloque <style> para lograr apariencia de calculadora clásica usando Flexbox.",
        "Agregar script JavaScript inline que mantenga el estado actual de la expresión mostrada en la pantalla.",
        "Implementar funciones que actualicen la pantalla al presionar cada botón, construyendo la cadena de expresión.",
        "Al pulsar '=', enviar una petición POST a '/api/calculate' con cuerpo JSON {\"expression\": <cadena>}.",
        "Procesar la respuesta y mostrar el valor de 'result' en la pantalla; si ocurre error, mostrar mensaje apropiado."
      ]
    }
  ]
}
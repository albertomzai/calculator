{
  "api_contract": {
    "ruta": "/api/calculate",
    "metodo": "POST",
    "descripcion": "Endpoint para evaluar una expresión matemática segura.",
    "parametros_entrada": {
      "expression": "string"
    },
    "respuesta_esperada": {
      "result": "number"
    }
  },
  "plan": [
    {
      "etapa": "backend",
      "tareas": [
        "Crear la estructura de directorios del proyecto Flask: backend/, backend/routes.py, backend/__init__.py, app.py.",
        "Definir en backend/__init__.py una factory function `create_app` que inicialice una instancia de Flask y registre el Blueprint del módulo routes.",
        "En backend/routes.py crear un Blueprint llamado `api_bp` con la ruta POST '/api/calculate'.",
        "Implementar dentro del endpoint la recepción del JSON con el campo 'expression', validación del tipo string, y uso de una función segura para evaluar la expresión sin usar eval directamente.",
        "Devolver en formato JSON el objeto {'result': valor_calculado} o un error 400 con mensaje descriptivo si la entrada es inválida.",
        "Agregar manejo de excepciones globales en Flask para capturar errores de evaluación y responder con códigos HTTP apropiados.",
        "Crear un archivo requirements.txt que incluya 'Flask' y cualquier librería adicional necesaria para la evaluación segura (por ejemplo, 'asteval').",
        "Añadir un script `run.py` en la raíz que importe `create_app` y lance el servidor de desarrollo.",
        "Escribir pruebas unitarias en tests/test_backend.py usando pytest y Flask test client para validar los casos: cálculo correcto, expresión inválida, y manejo de errores."
      ]
    },
    {
      "etapa": "frontend",
      "tareas": [
        "Crear la carpeta frontend/ con un único archivo index.html.",
        "Diseñar en index.html una estructura de calculadora usando HTML5 y CSS Grid para posicionar pantalla y botones.",
        "Implementar un script JavaScript inline que mantenga el estado actual de la expresión mostrada en la pantalla.",
        "Añadir manejadores de eventos a los botones numéricos, operadores, punto decimal, borrado (C) y igual (=).",
        "Al hacer clic en '=', enviar una petición fetch POST a '/api/calculate' con JSON {expression: cadena_actual}.",
        "Procesar la respuesta JSON y actualizar la pantalla mostrando el valor de 'result', o un mensaje de error si se devuelve 400.",
        "Incluir manejo básico de errores de red para informar al usuario en caso de fallo de la API."
      ]
    }
  ]
}
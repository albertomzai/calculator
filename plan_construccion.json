{
  "api_contract": {
    "ruta": "/api/calculate",
    "metodo": "POST",
    "descripcion": "Endpoint para evaluar una expresión matemática segura.",
    "parametros_entrada": {
      "expression": "string"
    },
    "respuesta_esperada": {
      "result": "number"
    }
  },
  "plan": [
    {
      "etapa": "backend",
      "tareas": [
        "Inicializar un proyecto Flask con la estructura de directorios básica.",
        "Crear el archivo `requirements.txt` con las dependencias 'Flask' y 'simpleeval'.",
        "Definir la función factory `create_app` en `backend/__init__.py` que configure la app Flask.",
        "Configurar la app para servir los archivos estáticos desde la ruta relativa '../frontend'.",
        "Crear el módulo `routes.py` dentro de `backend/` y registrar un Blueprint para '/api/calculate'.",
        "Implementar en `routes.py` el endpoint POST '/api/calculate' que reciba JSON con clave 'expression', evalúe la expresión usando `simpleeval.simple_eval`, maneje excepciones y devuelva JSON con clave 'result'.",
        "Añadir manejo de errores 400 para expresiones inválidas.",
        "Crear el archivo `app.py` en la raíz que importe `create_app` y arranque la aplicación.",
        "Escribir pruebas unitarias en `tests/test_backend.py` usando pytest y Flask test client para validar respuestas correctas y manejo de errores.",
        "Configurar `pytest.ini` con `[pytest]\\npythonpath = .`."
      ]
    },
    {
      "etapa": "frontend",
      "tareas": [
        "Crear el archivo `frontend/index.html` con la estructura HTML básica: encabezado, pantalla de entrada y resultado, y botones numerales 0-9, operadores + - * /, punto decimal, igual (=), y borrar (C).",
        "Aplicar estilos CSS en línea usando Grid o Flexbox para lograr una apariencia clásica de calculadora.",
        "Añadir un script JavaScript inline que mantenga el estado actual de la expresión mostrada en la pantalla.",
        "Implementar manejadores de clic para cada botón que actualicen la expresión mostrada.",
        "Para el botón igual (=), enviar mediante `fetch` la expresión a '/api/calculate' con método POST y cabecera 'Content-Type: application/json'.",
        "Procesar la respuesta JSON y mostrar el valor de 'result' en la pantalla de resultado.",
        "Incluir manejo básico de errores para mostrar un mensaje cuando la API devuelva error."
      ]
    }
  ]
}
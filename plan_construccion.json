{
  "api_contract": {
    "ruta": "/api/calculate",
    "metodo": "POST",
    "descripcion": "Endpoint que recibe una expresión matemática como string y devuelve su resultado.",
    "parametros_entrada": {
      "expression": "string"
    },
    "respuesta_esperada": {
      "result": "number"
    }
  },
  "plan": [
    {
      "etapa": "backend",
      "tareas": [
        "Crear la estructura de directorios básica para un proyecto Flask (app.py, requirements.txt).",
        "Instalar y configurar Flask en el entorno virtual.",
        "Definir el endpoint POST '/api/calculate' que acepte JSON con la clave 'expression'.",
        "Implementar una función segura para evaluar la expresión matemática sin usar eval directamente.",
        "Añadir validación de entrada para asegurar que la expresión contiene solo dígitos, operadores y puntos decimales.",
        "Gestionar excepciones y devolver errores 400 en caso de expresiones inválidas.",
        "Retornar el resultado de la evaluación como JSON con clave 'result'.",
        "Configurar CORS para permitir solicitudes desde el dominio del frontend si es necesario."
      ]
    },
    {
      "etapa": "frontend",
      "tareas": [
        "Crear un archivo 'index.html' con una estructura básica HTML5.",
        "Diseñar la pantalla de la calculadora usando CSS Grid o Flexbox, incluyendo un área de visualización para input y resultado.",
        "Añadir botones numéricos 0‑9, operadores +, -, *, /, punto decimal, igual (=) y borrar (C).",
        "Implementar lógica JavaScript inline para construir la expresión matemática al hacer clic en los botones.",
        "Al pulsar '=', capturar la expresión mostrada y enviar una solicitud POST a '/api/calculate' con JSON {expression: <string>}.",
        "Procesar la respuesta del backend y actualizar el área de visualización con el valor 'result'.",
        "Incluir manejo básico de errores para mostrar un mensaje en caso de fallo de la API.",
        "Garantizar que el HTML sea autocontenido sin dependencias externas."
      ]
    }
  ]
}
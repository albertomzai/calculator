{
  "api_contract": {
    "ruta": "/api/calculate",
    "metodo": "POST",
    "descripcion": "Calcula una expresión matemática recibida como cadena.",
    "parametros_entrada": {
      "expression": "string"
    },
    "respuesta_esperada": {
      "result": "number"
    }
  },
  "contrato_qa_e2e": {
    "pantalla_input": "display-input",
    "pantalla_resultado": "display-result",
    "boton_numero_0": "btn-0",
    "boton_numero_1": "btn-1",
    "boton_numero_2": "btn-2",
    "boton_numero_3": "btn-3",
    "boton_numero_4": "btn-4",
    "boton_numero_5": "btn-5",
    "boton_numero_6": "btn-6",
    "boton_numero_7": "btn-7",
    "boton_numero_8": "btn-8",
    "boton_numero_9": "btn-9",
    "boton_operador_mas": "btn-plus",
    "boton_operador_resta": "btn-minus",
    "boton_operador_multiplica": "btn-multiply",
    "boton_operador_divide": "btn-divide",
    "boton_punto_decimal": "btn-decimal",
    "boton_borrar": "btn-clear",
    "boton_igual": "btn-equal"
  },
  "plan": [
    {
      "etapa": "backend",
      "tareas": [
        "Crear el fichero requirements.txt con la dependencia Flask.",
        "Crear el fichero pytest.ini con la configuración básica de pytest.",
        "Crear el paquete backend/ con __init__.py que defina una factory create_app.",
        "En backend/__init__.py, inicializar un objeto Flask y registrar un Blueprint llamado api.",
        "Crear backend/routes.py que defina el endpoint POST /api/calculate usando el Blueprint api.",
        "Implementar en routes.py la lógica de evaluación segura de la expresión matemática recibida.",
        "Validar que la entrada es una cadena no vacía y devolver 400 si falla la validación.",
        "Devolver el resultado como JSON con clave 'result' y tipo número.",
        "Crear app.py en la raíz que importe create_app desde backend y ejecute app.run() cuando sea el módulo principal.",
        "Agregar un directorio tests/ con test_backend.py que use el client de Flask para enviar peticiones POST a /api/calculate y verificar respuestas correctas y manejo de errores."
      ]
    },
    {
      "etapa": "frontend",
      "tareas": [
        "Crear frontend/index.html como una SPA con la estructura de una calculadora clásica.",
        "Definir en el HTML un elemento con data-testid='display-input' para mostrar la expresión actual.",
        "Definir un elemento con data-testid='display-result' para mostrar el resultado final.",
        "Agregar botones numerales 0-9, cada uno con su respectivo data-testid según contrato_qa_e2e.",
        "Añadir botones de operadores +, -, *, / y . con sus data-testid correspondientes.",
        "Incluir un botón C (clear) con data-testid='btn-clear' que borre la expresión actual.",
        "Incluir un botón = (igual) con data-testid='btn-equal' que envíe la expresión al backend.",
        "Implementar JavaScript ES6 dentro de index.html para manejar clicks en los botones y construir la expresión en el display-input.",
        "Al hacer clic en '=', enviar una solicitud POST a /api/calculate con JSON { expression: '<expresión>' } usando fetch.",
        "Actualizar el display-result con el valor recibido del backend.",
        "Incluir manejo de errores que muestre un mensaje breve en el display-result si la respuesta no es 200."
      ]
    },
    {
      "etapa": "e2e",
      "tareas": [
        "Crear un archivo cypress/e2e/calculator.cy.js que visite http://localhost:5000/frontend/index.html.",
        "Simular una secuencia de clicks para calcular '12+7*3' usando los data-testid definidos.",
        "Esperar la respuesta del backend y verificar que el display-result muestre '33'.",
        "Incluir pruebas para el botón clear borrando tanto la expresión como el resultado.",
        "Agregar un test que intente enviar una expresión inválida (por ejemplo, '') y verifique que se muestra un mensaje de error."
      ]
    }
  ]
}
{
  "api_contract": {
    "ruta": "/api/calculate",
    "metodo": "POST",
    "descripcion": "Endpoint para evaluar una expresión matemática segura.",
    "parametros_entrada": {
      "expression": "string"
    },
    "respuesta_esperada": {
      "result": "number"
    }
  },
  "plan": [
    {
      "etapa": "backend",
      "tareas": [
        "Inicializar un proyecto Flask con la estructura de directorios estándar (app, static, templates).",
        "Crear el archivo 'app.py' que configure la aplicación Flask y registre los blueprints necesarios.",
        "Definir en 'app.py' un endpoint POST '/api/calculate' que reciba JSON con el campo 'expression'.",
        "Implementar una función de validación para garantizar que la expresión contiene solo dígitos, operadores aritméticos básicos (+, -, *, /) y puntos decimales.",
        "Evaluar la expresión utilizando una técnica segura (por ejemplo, ast.parse con un nodo permitido), evitando eval directo.",
        "Devolver el resultado numérico en formato JSON bajo la clave 'result', manejando excepciones para expresiones inválidas con códigos de estado 400.",
        "Configurar CORS si se requiere acceso desde dominios externos durante desarrollo."
      ]
    },
    {
      "etapa": "frontend",
      "tareas": [
        "Crear el archivo 'index.html' en la carpeta 'static'.",
        "Diseñar una interfaz de calculadora con CSS Grid o Flexbox para los botones y la pantalla.",
        "Agregar un elemento <div> o <input> que muestre la expresión actual y el resultado final.",
        "Incluir botones numéricos 0‑9, operadores +, -, *, /, punto decimal, igual (=), y borrar (C).",
        "Implementar JavaScript inline dentro de 'index.html' que capture los clics en cada botón y construya la cadena de expresión mostrada en pantalla.",
        "Añadir un manejador para el botón '=' que envíe una petición fetch POST a '/api/calculate' con JSON { expression: <cadena> }. ",
        "Procesar la respuesta JSON y actualizar la pantalla mostrando el valor bajo 'result'.",
        "Incluir manejo básico de errores (por ejemplo, mostrar mensaje de error si el backend devuelve 400)."
      ]
    }
  ]
}
{
  "api_contract": {
    "ruta": "/api/calculate",
    "metodo": "POST",
    "descripcion": "Endpoint para evaluar expresiones matemáticas.",
    "parametros_entrada": {
      "expression": "string"
    },
    "respuesta_esperada": {
      "result": "number"
    }
  },
  "plan": [
    {
      "etapa": "backend",
      "tareas": [
        "Inicializar un proyecto Flask con una estructura de directorios básica para el backend.",
        "Crear la aplicación factory `create_app` en `backend/__init__.py` que configure Flask y registre los blueprints.",
        "Definir un Blueprint en `backend/routes.py` con el endpoint POST '/api/calculate'.",
        "Implementar lógica de evaluación segura de expresiones usando una función auxiliar que restrinja operadores permitidos y evite ejecución de código arbitrario.",
        "Validar la presencia y tipo del campo 'expression' en el JSON recibido; devolver 400 si falta o no es string.",
        "Calcular el resultado y devolverlo en formato JSON {\"result\": <number>}.",
        "Manejar excepciones de sintaxis y división por cero, respondiendo con código 422 y mensaje descriptivo.",
        "Crear `requirements.txt` listando 'Flask' y cualquier dependencia adicional necesaria (p.ej. 'asteval').",
        "Agregar un script `app.py` en la raíz que importe `create_app` y lance el servidor Flask.",
        "Escribir pruebas unitarias en `tests/test_backend.py` usando `pytest` y el test client de Flask para cubrir casos válidos, inválidos y errores."
      ]
    },
    {
      "etapa": "frontend",
      "tareas": [
        "Crear la carpeta `frontend/` y dentro colocar un único archivo `index.html`.",
        "Diseñar la estructura HTML con una pantalla (div) que muestre la expresión actual y el resultado.",
        "Agregar botones para 0-9, +, -, *, /, =, C y . usando Grid o Flexbox para emular una calculadora clásica.",
        "Incorporar un script JavaScript inline dentro de `index.html` que maneje eventos click en los botones, construyendo la expresión en la pantalla.",
        "Implementar función que capture el contenido al presionar '=', envíe una solicitud POST a '/api/calculate' con JSON {expression: <cadena>}.",
        "Procesar la respuesta y actualizar la pantalla mostrando el resultado.",
        "Añadir manejo de errores básico (por ejemplo, mostrar mensaje si la API devuelve 400/422).",
        "Incluir estilos CSS mínimos para que la calculadora sea visualmente coherente con una interfaz clásica."
      ]
    }
  ]
}
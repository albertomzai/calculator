{
  "api_contract": {
    "ruta": "/api/calculate",
    "metodo": "POST",
    "descripcion": "Evalúa una expresión matemática recibida como cadena y devuelve el resultado.",
    "parametros_entrada": {
      "expression": "string"
    },
    "respuesta_esperada": {
      "result": "number"
    }
  },
  "contrato_qa_e2e": {
    "pantalla_input": "display",
    "boton_numero_0": "btn-0",
    "boton_numero_1": "btn-1",
    "boton_numero_2": "btn-2",
    "boton_numero_3": "btn-3",
    "boton_numero_4": "btn-4",
    "boton_numero_5": "btn-5",
    "boton_numero_6": "btn-6",
    "boton_numero_7": "btn-7",
    "boton_numero_8": "btn-8",
    "boton_numero_9": "btn-9",
    "boton_decimal": "btn-decimal",
    "boton_suma": "btn-add",
    "boton_resta": "btn-subtract",
    "boton_multiplicacion": "btn-multiply",
    "boton_division": "btn-divide",
    "boton_igual": "btn-equals",
    "boton_borrar": "btn-clear"
  },
  "plan": [
    {
      "etapa": "backend",
      "tareas": [
        "Crear el fichero requirements.txt con las dependencias Flask y pytest.",
        "Crear el fichero pytest.ini en la raíz con la configuración básica.",
        "Crear el paquete backend/ con un archivo __init__.py que defina la factory create_app.",
        "En backend/__init__.py, configurar la aplicación Flask para servir archivos estáticos desde '../frontend'.",
        "Dentro de backend/, crear routes.py y registrar un Blueprint llamado 'api' con el endpoint POST '/api/calculate'.",
        "Implementar en routes.py la lógica que recibe JSON con clave 'expression', evalúa la expresión de forma segura y devuelve JSON con clave 'result'.",
        "Crear el fichero app.py en la raíz que importe create_app del paquete backend y ejecute la aplicación.",
        "Añadir un directorio tests/ con test_backend.py que utilice el test client de Flask para verificar la respuesta del endpoint /api/calculate. ",
        "Agregar un .gitignore en la raíz para excluir entornos virtuales, __pycache__ y node_modules."
      ]
    },
    {
      "etapa": "frontend",
      "tareas": [
        "Crear el archivo frontend/index.html con una estructura de calculadora usando HTML5 y CSS Grid.",
        "Incluir en index.html un elemento con id 'display' para mostrar la expresión y el resultado.",
        "Añadir botones numericos 0-9, operadores + - * /, punto decimal, igual (=), borrar (C) con los data-testid correspondientes del contrato de pruebas.",
        "Escribir JavaScript ES6 dentro de index.html que capture clics en los botones, construya la expresión y actualice el display.",
        "Implementar la función que envía una petición POST a '/api/calculate' cuando se pulsa '=' y muestra el resultado devuelto."
      ]
    },
    {
      "etapa": "e2e",
      "tareas": [
        "Crear un archivo de prueba Cypress cypress/e2e/calculator.cy.js.",
        "La prueba debe abrir la página index.html, simular una secuencia de pulsaciones (por ejemplo '5', '*', '8', '-', '3', '='), y verificar que el elemento con data-testid 'display' muestra el valor esperado '37'."
      ]
    }
  ]
}
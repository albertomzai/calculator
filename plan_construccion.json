{
  "api_contract": {
    "ruta": "/api/calculate",
    "metodo": "POST",
    "descripcion": "Endpoint para evaluar expresiones matemáticas recibidas como cadena.",
    "parametros_entrada": {
      "expression": "string"
    },
    "respuesta_esperada": {
      "result": "number"
    }
  },
  "plan": [
    {
      "etapa": "backend",
      "tareas": [
        "Crear la estructura de directorios básica del proyecto Flask (app, static, templates).",
        "Inicializar un virtualenv y crear un archivo requirements.txt con Flask.",
        "Implementar el módulo app/__init__.py que crea el objeto Flask y configura CORS si es necesario.",
        "Definir en app/routes.py la ruta POST '/api/calculate' que recibe JSON con clave 'expression'.",
        "Validar que el cuerpo sea JSON válido y que 'expression' exista y sea string.",
        "Implementar una función de evaluación segura (por ejemplo, usando ast.parse) para calcular el resultado.",
        "Capturar excepciones de sintaxis o división por cero y devolver un error 400 con mensaje descriptivo.",
        "Devolver la respuesta en formato JSON: {\"result\": valor_numerico}.",
        "Configurar el script run.py que ejecuta app.run(host='0.0.0.0', port=5000).",
        "Agregar pruebas unitarias básicas para el endpoint usando pytest y Flask test client."
      ]
    },
    {
      "etapa": "frontend",
      "tareas": [
        "Crear un archivo 'index.html' con la estructura básica HTML5.",
        "Incluir un div que actúe como pantalla de la calculadora, con id 'display'.",
        "Definir una tabla o grid de botones para 0-9, +, -, *, /, ., C y =, cada uno con clases e ids identificables.",
        "Agregar estilos CSS en línea dentro del <style> para lograr un aspecto clásico (fondo gris, pantalla blanca).",
        "Escribir JavaScript ES6 inline que:",
        "  - Escuche eventos click en los botones numéricos y operadores y actualice el contenido de 'display' concatenando la cadena.",
        "  - El botón C borre todo el contenido del display.",
        "  - El botón = envíe una petición fetch POST a '/api/calculate' con cuerpo JSON {\"expression\": currentExpression}.",
        "  - Maneje la respuesta, mostrando en 'display' el valor de 'result' o un mensaje de error si el status no es 200.",
        "  - Añada manejo básico de errores de red y validación del formato de expresión antes de enviar (por ejemplo, evitar expresiones vacías).",
        "Incluir comentarios claros sobre la función de cada bloque de código para facilitar mantenimiento."
      ]
    }
  ]
}
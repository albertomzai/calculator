{
  "api_contract": {
    "ruta": "/api/calculate",
    "metodo": "POST",
    "descripcion": "Endpoint para evaluar una expresión matemática segura.",
    "parametros_entrada": {
      "expression": "string"
    },
    "respuesta_esperada": {
      "result": "number"
    }
  },
  "plan": [
    {
      "etapa": "backend",
      "tareas": [
        "Inicializar un proyecto Flask con estructura de directorios básica para el backend.",
        "Crear la aplicación factory `create_app` en `backend/__init__.py` que configure Flask y sirva archivos estáticos desde '../frontend'.",
        "Definir un Blueprint llamado `calc_bp` en `backend/routes.py` con el endpoint POST '/api/calculate'.",
        "Implementar la lógica de evaluación segura de expresiones usando una función utilitaria que limite a operadores aritméticos básicos.",
        "Validar la entrada JSON para asegurar que contiene la clave 'expression' y que su valor es un string no vacío.",
        "Retornar el resultado como JSON con la clave 'result', o un error 400 con mensaje descriptivo si la expresión es inválida.",
        "Agregar `requirements.txt` con dependencias 'Flask'.",
        "Crear `app.py` en la raíz que importe y ejecute `create_app()`.",
        "Escribir pruebas unitarias en `tests/test_backend.py` usando Flask test client para cubrir casos de éxito y error.",
        "Incluir un archivo `pytest.ini` con configuración mínima para ejecutar las pruebas."
      ]
    },
    {
      "etapa": "frontend",
      "tareas": [
        "Crear el único archivo `frontend/index.html` con estructura básica: título, pantalla de entrada/resultado y botones de calculadora.",
        "Diseñar la UI usando CSS Grid o Flexbox para imitar una calculadora clásica.",
        "Agregar un script inline que gestione los clics en los botones numericos y operadores, construyendo la expresión en la pantalla.",
        "Implementar el botón 'C' para borrar toda la entrada actual.",
        "Al hacer clic en '=', capturar la expresión mostrada, enviar una petición POST a '/api/calculate' con JSON {\"expression\": \"<exp>\"}.",
        "Mostrar la respuesta `result` en la pantalla de resultado o un mensaje de error si el backend devuelve 400.",
        "Incluir manejo básico de errores y validación de entrada antes de enviar al servidor."
      ]
    }
  ]
}
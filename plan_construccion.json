{
  "api_contract": {
    "ruta": "/api/calculate",
    "metodo": "POST",
    "descripcion": "Endpoint para evaluar una expresión matemática proporcionada por el cliente.",
    "parametros_entrada": {"expression": "string"},
    "respuesta_esperada": {"result": "number"}
  },
  "contrato_qa_e2e": {
    "pantalla_input": "screen-input",
    "pantalla_resultado": "screen-result",
    "boton_numero_0": "btn-0",
    "boton_numero_1": "btn-1",
    "boton_numero_2": "btn-2",
    "boton_numero_3": "btn-3",
    "boton_numero_4": "btn-4",
    "boton_numero_5": "btn-5",
    "boton_numero_6": "btn-6",
    "boton_numero_7": "btn-7",
    "boton_numero_8": "btn-8",
    "boton_numero_9": "btn-9",
    "boton_punto": "btn-dot",
    "boton_suma": "btn-plus",
    "boton_resta": "btn-minus",
    "boton_multiplicacion": "btn-mul",
    "boton_division": "btn-div",
    "boton_igual": "btn-equals",
    "boton_borrar": "btn-clear"
  },
  "plan": [
    {
      "etapa": "backend",
      "tareas": [
        "Crear el fichero requirements.txt con Flask y pytest.",
        "Crear el fichero pytest.ini con la configuración básica de pytest.",
        "Definir la aplicación factory create_app en backend/__init__.py.",
        "Registrar un Blueprint en backend/routes.py que exponga POST /api/calculate.",
        "Implementar la lógica de evaluación segura de expresiones matemáticas dentro del endpoint.",
        "Configurar app.py para importar y ejecutar la aplicación Flask.",
        "Crear el directorio tests/ con un archivo test_backend.py que pruebe el endpoint POST /api/calculate usando el cliente de prueba de Flask.",
        "Añadir .gitignore en la raíz para ignorar entornos virtuales y archivos generados."]
    },
    {
      "etapa": "frontend",
      "tareas": [
        "Crear frontend/index.html con una estructura HTML5 que incluya una pantalla de entrada, una pantalla de resultado y botones numericos y operacionales.",
        "Incorporar estilos CSS simples usando Flexbox para la disposición de los elementos.",
        "Agregar atributos data-testid a cada elemento clave según contrato_qa_e2e.",
        "Implementar JavaScript ES6 que construya la expresión en la pantalla al hacer clic en los botones.",
        "Enviar la expresión completa al endpoint POST /api/calculate cuando se pulse el botón igual, y mostrar el resultado devuelto en la pantalla de resultado."]
    },
    {
      "etapa": "e2e",
      "tareas": [
        "Crear un archivo cypress/e2e/calculator_spec.js que visite la página index.html.",
        "Simular una secuencia de pulsaciones (ej. 5 + 3 =) usando los data-testid definidos.",
        "Verificar que el resultado mostrado en pantalla sea 8."]
    }
  ]
}